import groovy.json.JsonSlurper

buildscript {
    repositories {
        maven {
            name = "Gradle"
            url = "https://plugins.gradle.org/m2/"
        }
    }
}

plugins {
    // todo: cannot upgrade this as consumers still have jdk 8 configured in gradle separate from the toolchain
    id 'nu.studer.jooq' version '5.2.2'
    id "com.github.johnrengelman.shadow" version "8.1.0"
}

apply plugin: "java"

ext {
    lombokVersion = "1.18.26"
    porklibVersion = "0.5.8-SNAPSHOT"
    postgresVersion = '42.5.4'
}

group "com.zenith"

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

compileJava {
    sourceCompatibility = targetCompatibility = "17"
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
}

repositories {
    maven {
        name = "jitpack.io"
        url = "https://jitpack.io"
    }
    maven {
        name = "maven central"
        url = "https://repo1.maven.org/maven2/"
    }
    maven {
        name = "DaPorkchop_"
        url = "https://maven.daporkchop.net/"
    }
    maven {
        name = "litarvan"
        url = "https://litarvan.github.io/maven"
    }
    maven {
        name = "minecraft"
        url "https://libraries.minecraft.net"
    }
    mavenLocal()
}

sourceSets {
    main {
        resources {
            srcDirs("data/")
        }
    }
}

configurations {
    shade
    implementation.extendsFrom shade
}

jooq {
    // read from config.json (will fail if config doesn't exist)
    def dbUrl = ''
    def dbUser = ''
    def dbPass = ''
    try {
        def inputFile = new File(projectDir.getAbsolutePath() + "/config.json")
        def jsonFile = new JsonSlurper().parseText(inputFile.text)
        dbUrl = 'jdbc:postgresql://' + jsonFile.database.host + ':' + jsonFile.database.port + '/postgres'
        dbUser = jsonFile.database.username
        dbPass = jsonFile.database.password
    } catch (Exception ex) {
        // fall through
        println("config.json does not exist, unable to set database credentials. generateJooq will fail if run.")
    }

    configurations {
        main {  // name of the jOOQ configuration
            generateSchemaSourceOnCompilation = false  // disable auto-execution in build task

            generationTool {
                logging = org.jooq.meta.jaxb.Logging.WARN
                jdbc {
                    driver = 'org.postgresql.Driver'
                    url = dbUrl
                    user = dbUser
                    password = dbPass
                    properties {
                        property {
                            key = 'ssl'
                            value = 'false'
                        }
                    }
                }
                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'
                    database {
                        name = 'org.jooq.meta.postgres.PostgresDatabase'
                        inputSchema = 'public'
                        forcedTypes {
                        }
                    }
                    generate {
                        deprecated = false
                        records = true
                        immutablePojos = true
                        fluentSetters = true
                        routines = false
                    }
                    target {
                        packageName = 'com.zenith.database.dto'
                        // you need to manually move these generated files into main src set
                        // only needs to be done on db schema changes
                        directory = 'build/jooq/main'
                    }
                    strategy.name = 'org.jooq.codegen.DefaultGeneratorStrategy'
                }
            }
        }
    }
}

dependencies {
    jooqGenerator "org.postgresql:postgresql:$postgresVersion"
    shade 'org.jooq:jooq:3.17.8'
    shade "com.zaxxer:HikariCP:5.0.1"
    shade "org.postgresql:postgresql:$postgresVersion"
    shade 'org.eclipse.jgit:org.eclipse.jgit:5.13.1.202206130422-r'
    shade 'org.eclipse.jgit:org.eclipse.jgit.ssh.jsch:5.13.1.202206130422-r'
    shade 'com.github.mwiede:jsch:0.2.4'
    shade 'com.google.guava:guava:31.1-jre'
    shade "org.apache.commons:commons-math3:3.6.1"
    shade "org.apache.commons:commons-collections4:4.4"
    shade "net.daporkchop.lib:hash:$porklibVersion"
    shade "net.daporkchop.lib:minecraft-text:$porklibVersion"
    shade "ch.qos.logback:logback-classic:1.4.5"
    shade 'org.slf4j:slf4j-api:2.0.6'
    shade 'org.fusesource.jansi:jansi:2.4.0'
    shade 'com.mojang:brigadier:1.0.18'
    shade 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.14.2'

    shade("com.github.5cmc:MCProtocolLib:b889208170") {
        exclude group: "io.netty", module: "netty-all"
    }
    shade "com.github.5cmc:MCAuthLib:94b70b772d"

    shade 'io.netty:netty-codec-haproxy:4.1.89.Final'

    shade "com.discord4j:discord4j-core:3.2.3"

    shade "com.github.collarmc:pounce:0e8492b68e"
    shade 'org.redisson:redisson:3.19.3'

    testImplementation "junit:junit:4.13.2"

    compileOnly "org.projectlombok:lombok:$lombokVersion"
    testCompileOnly "org.projectlombok:lombok:$lombokVersion"
    annotationProcessor "org.projectlombok:lombok:$lombokVersion"
    testAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"
    shade('io.netty:netty-resolver-dns-native-macos:4.1.79.Final:osx-aarch_64')
}

tasks.register('run', JavaExec) {
    group = "run"
    description = "Execute proxy"
    classpath = sourceSets.main.runtimeClasspath
    mainClass.set("com.zenith.Proxy")
    maxHeapSize = "280M"
    jvmArgs = ["-server", "-XX:NewSize=80M", "-Djava.util.concurrent.ForkJoinPool.common.parallelism=16"]
}

tasks.withType(JavaExec).configureEach {
    javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

run.dependsOn build

//disable regular unshaded jar
jar.enabled = false

tasks.register('sourceJar', Jar) {
    from sourceSets.main.allSource
}

shadowJar {
    archiveBaseName.set(project.name)
    archiveClassifier.set('')
    archiveVersion.set('')

    configurations = [project.configurations.shade]

    exclude 'module-info.class'

    manifest {
        attributes "Implementation-Title": "Proxy",
                "Implementation-Version": project.version,
                "Main-Class": "com.zenith.Proxy"
    }
}

tasks.register('clearJooqBuild') {
    // clear any jooq generated classes in the build directory
    // we already have these classes in our src
    // can't configure jooq generator to not auto-add these generated dirs to gradle source sets
    group = "build"
    // this can be removed after all instances get updated to this commit at least once
    new File('build/generated-src').deleteDir()
    new File('build/jooq').deleteDir()
}

compileJava.dependsOn([clearJooqBuild])
tasks.named('generateJooq').configure { allInputsDeclared = false }
tasks.register('jarBuild') {
    group = "build"
}
jarBuild.dependsOn([shadowJar, build])

//build.dependsOn(shadowJar)
