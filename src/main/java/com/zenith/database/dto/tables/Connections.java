/*
 * This file is generated by jOOQ.
 */
package com.zenith.database.dto.tables;


import com.zenith.database.dto.Public;
import com.zenith.database.dto.enums.Connectiontype;
import com.zenith.database.dto.tables.records.ConnectionsRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.OffsetDateTime;
import java.util.UUID;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Connections extends TableImpl<ConnectionsRecord> {

    /**
     * The reference instance of <code>public.connections</code>
     */
    public static final Connections CONNECTIONS = new Connections();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>public.connections.time</code>.
     */
    public final TableField<ConnectionsRecord, OffsetDateTime> TIME = createField(DSL.name("time"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");
    /**
     * The column <code>public.connections.connection</code>.
     */
    public final TableField<ConnectionsRecord, Connectiontype> CONNECTION = createField(DSL.name("connection"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(com.zenith.database.dto.enums.Connectiontype.class), this, "");
    /**
     * The column <code>public.connections.player_name</code>.
     */
    public final TableField<ConnectionsRecord, String> PLAYER_NAME = createField(DSL.name("player_name"), SQLDataType.CLOB.nullable(false), this, "");
    /**
     * The column <code>public.connections.player_uuid</code>.
     */
    public final TableField<ConnectionsRecord, UUID> PLAYER_UUID = createField(DSL.name("player_uuid"), SQLDataType.UUID.nullable(false), this, "");

    private Connections(Name alias, Table<ConnectionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Connections(Name alias, Table<ConnectionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.connections</code> table reference
     */
    public Connections(String alias) {
        this(DSL.name(alias), CONNECTIONS);
    }

    /**
     * Create an aliased <code>public.connections</code> table reference
     */
    public Connections(Name alias) {
        this(alias, CONNECTIONS);
    }

    /**
     * Create a <code>public.connections</code> table reference
     */
    public Connections() {
        this(DSL.name("connections"), null);
    }

    public <O extends Record> Connections(Table<O> child, ForeignKey<O, ConnectionsRecord> key) {
        super(child, key, CONNECTIONS);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ConnectionsRecord> getRecordType() {
        return ConnectionsRecord.class;
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Connections as(String alias) {
        return new Connections(DSL.name(alias), this);
    }

    @Override
    public Connections as(Name alias) {
        return new Connections(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Connections rename(String name) {
        return new Connections(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Connections rename(Name name) {
        return new Connections(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<OffsetDateTime, Connectiontype, String, UUID> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
