/*
 * This file is generated by jOOQ.
 */
package com.zenith.database.dto.tables;


import com.zenith.database.dto.Public;
import com.zenith.database.dto.tables.records.PlaytimeAllRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.UUID;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class PlaytimeAll extends TableImpl<PlaytimeAllRecord> {

    /**
     * The reference instance of <code>public.playtime_all</code>
     */
    public static final PlaytimeAll PLAYTIME_ALL = new PlaytimeAll();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>public.playtime_all.p_uuid</code>.
     */
    public final TableField<PlaytimeAllRecord, UUID> P_UUID = createField(DSL.name("p_uuid"), SQLDataType.UUID, this, "");
    /**
     * The column <code>public.playtime_all.playtime</code>.
     */
    public final TableField<PlaytimeAllRecord, Integer> PLAYTIME = createField(DSL.name("playtime"), SQLDataType.INTEGER, this, "");

    private PlaytimeAll(Name alias, Table<PlaytimeAllRecord> aliased) {
        this(alias, aliased, new Field[0]);
    }

    private PlaytimeAll(Name alias, Table<PlaytimeAllRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.function());
    }

    /**
     * Create an aliased <code>public.playtime_all</code> table reference
     */
    public PlaytimeAll(String alias) {
        this(DSL.name(alias), PLAYTIME_ALL);
    }

    /**
     * Create an aliased <code>public.playtime_all</code> table reference
     */
    public PlaytimeAll(Name alias) {
        this(alias, PLAYTIME_ALL);
    }

    /**
     * Create a <code>public.playtime_all</code> table reference
     */
    public PlaytimeAll() {
        this(DSL.name("playtime_all"), null);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PlaytimeAllRecord> getRecordType() {
        return PlaytimeAllRecord.class;
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public PlaytimeAll as(String alias) {
        return new PlaytimeAll(DSL.name(alias), this, parameters);
    }

    @Override
    public PlaytimeAll as(Name alias) {
        return new PlaytimeAll(alias, this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public PlaytimeAll rename(String name) {
        return new PlaytimeAll(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public PlaytimeAll rename(Name name) {
        return new PlaytimeAll(name, null, parameters);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<UUID, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Call this table-valued function
     */
    public PlaytimeAll call() {
        PlaytimeAll result = new PlaytimeAll(DSL.name("playtime_all"), null, new Field[]{});

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }
}
