/*
 * This file is generated by jOOQ.
 */
package com.zenith.database.dto.tables;


import com.zenith.database.dto.Public;
import com.zenith.database.dto.tables.records.RestartsRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.OffsetDateTime;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Restarts extends TableImpl<RestartsRecord> {

    /**
     * The reference instance of <code>public.restarts</code>
     */
    public static final Restarts RESTARTS = new Restarts();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>public.restarts.time</code>.
     */
    public final TableField<RestartsRecord, OffsetDateTime> TIME = createField(DSL.name("time"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    private Restarts(Name alias, Table<RestartsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Restarts(Name alias, Table<RestartsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.restarts</code> table reference
     */
    public Restarts(String alias) {
        this(DSL.name(alias), RESTARTS);
    }

    /**
     * Create an aliased <code>public.restarts</code> table reference
     */
    public Restarts(Name alias) {
        this(alias, RESTARTS);
    }

    /**
     * Create a <code>public.restarts</code> table reference
     */
    public Restarts() {
        this(DSL.name("restarts"), null);
    }

    public <O extends Record> Restarts(Table<O> child, ForeignKey<O, RestartsRecord> key) {
        super(child, key, RESTARTS);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RestartsRecord> getRecordType() {
        return RestartsRecord.class;
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Restarts as(String alias) {
        return new Restarts(DSL.name(alias), this);
    }

    @Override
    public Restarts as(Name alias) {
        return new Restarts(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Restarts rename(String name) {
        return new Restarts(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Restarts rename(Name name) {
        return new Restarts(name, null);
    }

    // -------------------------------------------------------------------------
    // Row1 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row1<OffsetDateTime> fieldsRow() {
        return (Row1) super.fieldsRow();
    }
}
